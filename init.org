
#+title My emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Package System Setup
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  ;;add-to-list dodaje u listu samo ako varijabla vec nije u njoj! setq dodaje bez obzira na to

  (unless package-archive-contents
    (package-refresh-contents));;proverava da li je package-archive-contents tu, neophodno je proveriti da li postoji na lokalu ili ne, refershuje listu paketa u sustini

  (unless (package-installed-p 'use-package);;-p uvek na kraju znaci predikat(znaci ili true ili nil vrednost)
    (package-install 'use-package));;Ako paket "use-package" nije instaliran, instaliraj ga

(require 'use-package);;ukljucujemo paket
(setq use-package-always-ensure t);;osigurava da paketi koji su neophodni i koji se koriste u datoj emacs konfiguraciji budu preuzeti prilikom pokretanja emacs-a, ukoliko nisu, zato nema potrebe da se navodi :ensure t za svaki fajl

#+end_src
* Basic UI Config

#+begin_src emacs-lisp
    ;;ukljucuje brojeve redova/kolona za svaki deo koda
    (column-number-mode)
    (global-display-line-numbers-mode t)
  ;;iskljucuje brojeve redova za date mode-ove
    (dolist (mode '(org-mode-hook
                    term-mode-hook
                    shell-mode-hook
                    treemacs-mode
                    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))
    ;;adds a function to a "hook" variable



      (custom-set-variables
       ;; custom-set-variables was added by Custom.
       ;; If you edit it by hand, you could mess it up, so be careful.
       ;; Your init file should contain only one such instance.
       ;; If there is more than one, they won't work right.
       '(ansi-color-faces-vector
         [default default default italic underline success warning error])
       '(cua-mode t nil (cua-base))
       '(custom-safe-themes
         '("e6a2832325900ae153fd88db2111afac2e20e85278368f76f36da1f4d5a8151e" "cbdf8c2e1b2b5c15b34ddb5063f1b21514c7169ff20e081d39cf57ffee89bc1e" "da53441eb1a2a6c50217ee685a850c259e9974a8fa60e899d393040b4b8cc922" default))
       '(debug-on-error t)
       '(menu-bar-mode nil)
       '(package-selected-packages
         '(visual-fill-column org-bullets forge evil-magit counsel-projectile projectile solaire-mode helpful counsel which-key doom-modeline ivy use-package doom-themes))
       '(scroll-bar-mode nil)
       '(tool-bar-mode nil)
       '(tooltip-mode nil))
#+end_src
* Font config
This is a font configuration
Use Hydra to scale the text as needed
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Fira Code Retina" :height 100)
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 100)
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 120)
#+end_src

* Keybinding configurations
** General

KORISTI SE DA SETUJE KEYBINDINGE U GLOBALU I ZA SPECIFICAN MODE(major & minor (?) )
keymaps specificira za koji mode(ili modove) vaze pravila. Mode se definise kao:
IME-MODA-map (npr. clojure-mode-map)
prefixi specificiraju kako se ulazi u definer, zatim se iz samog definera izvlace bindovi, global-prefix radi bez obzira gde se nalazili (I think?)

#+begin_src emacs-lisp
(use-package general
  :config
  (general-create-definer zama/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (zama/leader-keys
    "t"  '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "choose theme")))

#+end_src

[[https://github.com/noctuid/general.el][General dokumentacija]]

** Evil

Vim emulation sloj za emacs
Shift-V ulazi u visual(line) mode
Ctr-G(escape) ulazi u normal mode)
slovo i sluzi za insert
"dd" u normal modu brise liniju
"u" u normal modu radi undo (samo brisanja ?)
Ctrl-Z switchuje izmedju normal mode(Vim/evil) i "emacs" mode


#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t);;uvek drzi ukljuceno(RECOMMENDED ?)
  (setq evil-want-keybinding nil)
  ;;(setq evil-want-C-u-scroll t);;ovo sluzi kao default Vim keybind za scrollovanje gore
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1);;ukljucuje evil mode globalno (?)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

[[https://github.com/emacs-evil/evil][Evil dokumentacija
]]
| Evil normal mode |                                    |
| Skracenica       | Opis                               |
| C-v              | duplira liniju                     |
| u                | undo                               |
| C-z              | switch na Emacs mode               |
| i                | Switch na insert mode              |
| Shift-V          | Visual line mode                   |
| dd               | brise liniju                       |
| d                | Brise selektovani sadrzaj i kopira |
| y                | Yank(copy) selektovanog            |
| P                | Nalepi sadrzaj PRE kursora         |
| p                | Nalepi sadrzaj NAKON kursora       |
| C-w              | Window manager (?)                 |
| j                | Next visual line                   |
| k                | Previous Visual line               |
| C-a              | Beginning of the line              |
| C-e              | End of the line                    |

| Evil insert mode |                  |
| Skracenica       | opis             |
| C-g/escape       | Switch na normal |
| Shift-insert     | Paste            |

** Evil collections

Dodatni keybindinzi koje sam Evil ne pokriva po difoltu

#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

[[https://github.com/emacs-evil/evil-collection][Evil collection dokumentacija
]]
* UI Configuration
** Color theme
#+begin_src emacs-lisp
;;doom-theme
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-outrun-electric t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src
** Better Modeline
#+begin_src emacs-lisp
;;AKO SE IKONICE NE VIDE, URADI M-x all-the-icons-install-fonts
(use-package all-the-icons)
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom(
	  (doom-modeline-height 15)
	  (doom-modeline-icon t)
	  ))
#+end_src
** Solaire mode
#+begin_src emacs-lisp
(use-package solaire-mode)
(add-to-list 'solaire-mode-themes-to-face-swap 'doom-outrun-electric)
(solaire-global-mode 1)
#+end_src
** Which key
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0))
#+end_src
** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]]je genericki completion alat ( koristi ivy-mode ).
Swiper je alternativa za ugradjeni isearch koji dobro radi sa Ivyjem
Counsel pruzi ekvivalente za Emacs komande(sa nekim dodatnim opcijama) (counsel-mode)

#+begin_src emacs-lisp
;;koristi ivy package, koji ima bolji autocomplete za meta- funkcional.(medju ostalim funkc.)

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-f" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :init
  (ivy-mode 1))
;;obogacuje ivy packet sa opisom funkcionalnosti i keybindovima(ako ih imaju)
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

;;counsel paket, koji koristi ivy rich, da dodatno obogati meta-pretrage, C-x C-f i dr.
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))
#+end_src

Kako se koristi

| funkcija       | precica | opis                                   |
|----------------+---------+----------------------------------------|
| Swiper         | C-s     | Trazi string po regexu za dati buffer  |
| Find file      | C-x C-f | Pronadji fajl                          |
| Counsel buffer | C-x b   | Bira se na koji buffer ce se prebaciti |
|                |         |                                        |

** Helpful

koristi counsel funkcionalnosti i helpful funkcionalnosti da overriduje defaultna ponasanja emacs-a npr. za describe-function ili bilo koje druge describe- funkcionalnosti

#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

** Text scaling
*** Hydra
Hydra se koristi kod buffer cycling-a, ali i za skaliranje teksta

Primer koriscenja: zamislimo da imamo C-c j i C-c k bindovano u konfiguraciji, i zelimo te dve komande da pozivamo u nekoj proizvoljnoj sekvenci, npr. C-c jjkkjkjkj, ovo nam dozvoljava Hydra paket, da ne pretiskamo C-c svaki put, vec samo jednom i da u sekvenci mozemo da zadajemo jjkkkjj naredbe, sto smo ovde iskoristili za povecavanje teksta.

#+begin_src emacs-lisp
(use-package hydra)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

(zama/leader-keys
  "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

* Org mode
** Better font faces
#+begin_src emacs-lisp
(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "DejaVu Sans Mono 13" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src
** Basic org mode conf
#+begin_src emacs-lisp
(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indend nil))

(use-package org
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis " ▼"
	org-hide-emphasis-markers t)
  (efs/org-font-setup))
#+end_src
** Nicer bullets for headings
#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src
** Center org buffers
#+begin_src emacs-lisp
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))
#+end_src
** Configure babel languages

#+begin_src emacs-lisp
(org-babel-do-load-languages 
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)));;specify which languages babel can execute
(push '("conf-unix" . conf-unix) org-src-lang-modes)
(setq org-confirm-babel-evaluate nil);;turn off the question "if u wanna execute this block of code"

#+end_src
** Structure templates
#+begin_src emacs-lisp
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src

** Auto-tangle configuration files

Basically automatically tangles this config file(saves it to another file), but just the codeblocks
#+begin_src emacs-lisp
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/init.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

* Development
** Commenting
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src
** Languages
*** Language Servers

LSP je Language Server Protocol koji se koristi da dostavi informaciju o autocompletion-u i slicnim stvarima vezanim za sintaksu jezika.

#+begin_src emacs-lisp
  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands(lsp lsp-deferred)
    :hook(lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l");;or change it to whatever u like
    :config
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :hook(lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

  (use-package lsp-treemacs
    :after lsp);;lsp-treemacs menu
  ;;we can also enable the sideline via lsp-ui-sideline-enable and lsp-ui-sideline-show-hover

  (use-package lsp-ivy)
  ;;lsp-ivy-workspace-symbol usage
#+end_src

Usage of LSP - works only if language is provided:

| command                      | shortcut    | description                                       |
|------------------------------+-------------+---------------------------------------------------|
| Find references              | C-c l g r   | Pronalazi sve reference selektovanog simbola radi |
| Find definitions             | C-c l g g   | Isto kao iznad, samo pronalazi  definicije        |
| Rename                       | C-c l r r   | Preimenuje selektovan simbol                      |
| Flymake diagnostics buffer   |             | Dijagnostika gresaka u datom fajlu - greske, warn |
| Code formatting              | C-c l = =   | Reformatira kod kako ih language serv. formatira  |
| lsp-treemacs-symbols         | M-x command | Show a tree view of symbols in the file           |
| lsp-treemacs-references      | M-x command | Show a tree view for refs of symbol under cursor  |
| lsp-treemacs-error-list      | M-x command | Show a tree veiw for diagnostic msgs              |
| lsp-ivy-workspace-symb       | M-x command | Search for a symbol name in the current project   |
| lsp-ivy-global-workspace-sym | M-x command | Searches in all active project workspaces         |
|                              |             |                                                   |
**** Documentation

[[https://github.com/emacs-lsp/lsp-ui][LSP-UI documentation]]


*** TypeScript
#+begin_src emacs-lisp
  (use-package typescript-mode
        :mode "\\.ts\\'"
      :hook (typescript-mode . lsp-deferred)
    :config
  (setq typescript-indent-level 2))
#+end_src

** Company mode

Provides a nicer in-buffer completion interface.
Company box further enhances the looks and icons and presentation

#+begin_src emacs-lisp
    (use-package company
      :after lsp-mode
      :hook(lsp-mode . company-mode)
      :bind (:map company-active-map
                  ("<tab>" . company-complete-selection))
      (:map lsp-mode-map
            ("<tab>" . company-indent-or-complete-common))
      :custom
      (company-minimum-prefix-length 1)
      (company-idle-delay 0.0))
  (use-package company-box
  :hook(company-mode . company-box-mode))
#+end_src

Hitting TAB is for completion

** Projectile

 Emacs ima koncept DIRECTORY LOCAL VARIABLES - kreira se fajl u repo folderu koji konfigurise emacs varijable, koje ce se primeniti na odredjene fajlove u projektu svaki put kad se otvori bafer koji cita fajl iz datog foldera:
  	- y - otvara .dir-locals.el unutar (trenutnog ?) repo-a, koji predstavlja taj konfiguracioni fajl u sustini...
	NAREDBE KOJE SE MOGU KORISTITI:
		+ projectile-project-run-cmd - koja naredba se izvrsava kada se uradi C-c p-p

 Kada se zavrsi editovanje i sacuva fajl, treba da se uradi evaluate (M-:) sa naredbom: (hack-dir-local-variables) i reloaduje ove promenljive iz dir-locals.el fajla.

#+begin_src emacs-lisp
  ;;projectile project interaction library for emacs. Offers functionalities for projects 
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects") ;;NOTE: set this path to where you keep git repos
      (setq projectile-project-search-path '("~/Projects"))) ;;NOTE: same for this
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

| funkcija                   | skracenica | opis                                         |
|----------------------------+------------+----------------------------------------------|
| projectile-edit-dir-locals | C-c p E    | Otvara .dir-locals.el unutar trenutnog repoa |
| projectile-project-run-cmd | C-c p-p    | Pokrece se projekat                          |
| hack-dir-local-variables   |            | Refreshuje .dir-locals.el kada se izmeni     |
| projectile menu            | C-c p      | Otvara projectile menu                       |


| Projectile menu komande   |            |                                                    |
| Funkcija                  | skracenica | opis                                               |
| projectile-switch-project | p          | Menja projekat                                     |
| fuzzy search              | f          | Fuzzy search u projektnom folderu                  |
| Testing project           | P          | Pokrece testove u datom projektu (?)               |
| (?)                       | Alt-o      | Prikazuje dodatne funkcionalnosti za dati projekat |
| counsel-projectile-rg     |            | Grep komanda, samo sto trazi po celom projektu     |

** Basic Magit setup
#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

| Funkcija       | skracenica | opis                                                    |
|----------------+------------+---------------------------------------------------------|
| Magit status   | C-x g      | Status verzionnisanja                                   |
| Staging        | C-x g s    | Staging fajlova                                         |
| Stage all      | C-x g S    | Staging svih fajlova                                    |
| Unstaging      | C-x g u    | Unstaging fajla                                         |
| Unstage all    | C-x g U    | Unstaging svih fajlova                                  |
| Branches       | C-x g b    | Otvara panel sa branches                                |
| Create branch  | C-x g b c  | Kreira branshu                                          |
| (?)            | C-x g b s  | (?)                                                     |
| Switch branch  | C-x g b b  | Menja tekucu branshu ( ZAHTEVA DA SE STASHUJU PROMENE ) |
| Commit panel   | C-x g c    | Panel sa commitovanjem                                  |
| Commit fajla   | C-x g c c  | Komituje fajl (C-c C-k to cancel)                       |
| Fixup fajla    | C-x g c F  | Fixuje prethodni komit(umesto rebase-ovanja)            |
| Stash list     | C-x g z    | Otvara stash listu                                      |
| Stash changes  | C-x g z z  | Stashuje promene                                        |
| Push panel     | C-x g p    | Otvara push panel                                       |
| Push to remote | C-x g p p  | pushuje na remote                                       |
| Fork(?)        | C-x g p u  | Nesto za forkovanje (?)                                 |
| Push elsewhere | C-x g p e  | Pushuje na neki drugi remote                            |
| Force push     | C-x g p f  | Forsira push ako failuje sa nekim REFS-ovima            |

** Forge
#+begin_src emacs-lisp
(use-package forge);;pruza informacije o nekom repozitorijumu, zahteva autentifikaciju sa GitHubom da bi se koristila. PROCITATI DOKUMENTACIJU 
#+end_src

[[https://github.com/magit/forge][Documentation page for Forge]]

NOTE: konfigurisi GitHub token pre nego sto koristis Forge!

[[https://magit.vc/manual/forge/Token-Creation.html#Token-Creation][*** Kreacija tokena]]
[[https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started][*** Getting started]]


** Rainbow delimiters

Delimiteri duginih boja kao visual aid tokom razvoja
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)) 
#+end_src

** Devdocs - Emacs viewer for DevDocs

It's a "Viewer" for documentation from the [[https://devdocs.io/][DevDocs website.]] 

#+begin_src emacs-lisp
(use-package devdocs)
#+end_src

How to use:
1. Download documentation with M-x devdocs-install, this will query the DevDocs website for available documents and save to disk;
2. Call M-x devdocs-lookup to search for entries

The first time you call the devdocs-lookup will show a list of docs to search ( you can select more than one via comma-seperated list). Every other call to this function will search in these docs(unless you give a prefix, which lets you select new docs). The current devdocs can be set up via devdocs-current-docs directly, dir-local variables or mode hooks:
#+begin_src emacs-lisp
;;(add-hook 'python-mode-hook
;;          (lambda () (setq-local devdocs-current-docs '("python~3.9"))))
#+end_src

* Terminals

** vterm

This is the terminal emulator part specifically tailored for Linux OS-es(doesn't work on Windows)

*** vterm

Improved terminal emulator.
Before installing, make sure you have the following dependencies installed:

| dependency name | version | description                                                   |
|-----------------+---------+---------------------------------------------------------------|
| GNU Emacs       | >=25.1  | With module support - check that module-file-suffix isn't nil |
| cmake           | >=3.11  | For makefiles                                                 |
| libtool-bin     |         | Related issues: [[https://github.com/akermu/emacs-libvterm/issues/66][#66]] [[https://github.com/akermu/emacs-libvterm/issues/85#issuecomment-491845136][#85]]                                       |
| libvterm        | >=0.1   | If it throws VTERM_COLOR during compilation, check [[https://github.com/akermu/emacs-libvterm/#frequently-asked-questions-and-problems][FAQ]]        |
|                 |         |                                                               |

#+begin_src emacs-lisp
  (if (eq system-type 'gnu/linux)
      (use-package vterm
        :commands vterm
        :config
        (setq term-prompt-regexp "^[^#$%\n]*[#$%>] *")
        ;;(setq vterm-shell "zsh") ;;for custom shell launch
        (setq vterm-max-scrollback 10000))
    )
#+end_src

** Eshell

#+begin_src emacs-lisp
(defun efs/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt)

(use-package eshell
  :hook (eshell-first-time-mode . efs/configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim")))

  (eshell-git-prompt-use-theme 'powerline))
#+end_src

*** Useful keybindings:
| Shortcut            | Description                               |
|---------------------+-------------------------------------------|
| C-c C-p / C-c C-n   | Go back or forward in the buffer          |
| M-p / M-n           | Go back and forward in the input history  |
| C-c C-u             | Delete the current input string backwards |
| counsel-esh-history | A searchable history of eshell            |

* Dired

** Dired basics
#+begin_src emacs-lisp

#+end_src
